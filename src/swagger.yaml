swagger: '2.0'
info:
  version: '1.0.0'
  title: Schedule Manager API
host: localhost:3005
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: authorization
    in: header
    description: |
      The following syntax must be used in the 'authorization' header :
          Bearer xxxxxx.yyyyyyy.zzzzzz

  ClientID:
    type: apiKey
    name: x-client-id
    in: header
    description: |
      User id
consumes:
  - application/json
produces:
  - application/json
paths:
  #   /login/{role}:
  /auth/signup:
    post:
      tags: [Auth]
      operationId: loginPost
      description: 'Signup to app'
      summary: 'Signup'
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: '#/definitions/Signup'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /auth/login:
    post:
      tags: [Auth]
      operationId: loginPost
      description: 'Login to app'
      summary: 'Login'
      parameters:
        # - name: role
        #   in: path
        #   required: true
        #   type: string
        - name: authentication
          in: body
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'

  /friend/send-request:
    patch:
      tags: [Friend]
      summary: 'Send friend request'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Friend'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /friend/accept:
    patch:
      tags: [Friend]
      summary: 'Accept friend request'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Friend'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
  /friend/unfriend:
    patch:
      tags: [Friend]
      summary: 'Un friend'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Friend'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
  /friend:
    get:
      tags: [Friend]
      summary: 'Get all friend list'
      security:
        - Bearer: []
        - ClientID: []
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
  /schedule:
    get:
      tags: [Schedule]
      summary: 'Get all schedule list'
      security:
        - Bearer: []
        - ClientID: []
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
    post:
      tags: [Schedule]
      summary: 'Create new schedule'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateSchedule'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
    patch:
      tags: [Schedule]
      summary: 'Update schedule'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Schedule'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
  /chat:
    get:
      tags: [Conversation]
      summary: 'Get all Conversation list'
      security:
        - Bearer: []
        - ClientID: []
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
    post:
      tags: [Conversation]
      summary: 'Create new Conversation'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
    patch:
      tags: [Conversation]
      summary: 'Update Conversation'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: Body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
  /chat/user-conversations:
    get:
      tags: [Conversation]
      summary: 'Get all user conversation list'
      security:
        - Bearer: []
        - ClientID: []
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Token'
  /chat/send-message/{conversationId}:
    post:
      tags: [Conversation]
      summary: 'Send message'
      security:
        - Bearer: []
        - ClientID: []
      parameters:
        - name: conversationId
          in: path
          description: ID of the conversation where the message will be sent
          required: true
          type: string
        - name: newMessage
          in: body
          description: Message object to be sent
          required: true
          schema:
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/Resource'
  /user/search:
    get:
      tags:
        - User
      summary: Search users by name
      parameters:
        - name: name
          in: query
          description: The name to search for
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              message:
                type: string
              metadata:
                type: array
                items:
                  $ref: '#/definitions/User'

definitions:
  Login:
    type: object
    properties:
      email:
        type: string
        example: 'hoa@gmail.com'
      password:
        type: string
        example: 'P@ssw0rd'
  Signup:
    type: object
    properties:
      name:
        type: string
        example: 'TonyHoa'
      email:
        type: string
        example: 'hoa@gmail.com'
      address:
        type: string
        example: 'Nha Trang'
      password:
        type: string
        example: 'P@ssw0rd'
  Friend:
    type: object
    properties:
      friendId:
        type: string
        example: 'user id'
  Member:
    type: object
    properties:
      memberId:
        type: string
        example: 'user id'
      permission:
        type: string
        enum: ['edit', 'view']
        default: 'view'
  CreateSchedule:
    type: object
    properties:
      # ownerId:
      #   type: string
      #   example: 'user id'
      #   x-nullable: true
      topic:
        type: string
        example: 'Đi làm'
      description:
        type: string
        example: 'Đi làm ngày đầu trong tuần'
      imageUrl:
        type: string
        example: 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg'
      members:
        type: array
        items:
          type: array
          $ref: '#/definitions/Member'
      total:
        type: number
        example: 100000
      startDate:
        type: string
        format: date-time
        example: '2024-03-04T08:00:00.000Z'
      endDate:
        type: string
        format: date-time
        example: '2024-03-04T17:00:00.000Z'
      status:
        type: string
        enum: ['pending', 'in_progress', 'completed']
        example: 'pending'
      isActive:
        type: boolean
        example: true
  Schedule:
    type: object
    properties:
      # ownerId:
      #   type: string
      #   example: 'user id'
      #   x-nullable: true
      topic:
        type: string
        example: 'Đi làm'
      description:
        type: string
        example: 'Đi làm ngày đầu trong tuần'
      imageUrl:
        type: string
        example: 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg'
      plans:
        type: array
        items:
          type: items
          $ref: '#/definitions/Plan'
      members:
        type: array
        items:
          type: items
          $ref: '#/definitions/Member'
      total:
        type: number
        example: 100000
      startDate:
        type: string
        format: date-time
        example: '2024-03-04T08:00:00.000Z'
      endDate:
        type: string
        format: date-time
        example: '2024-03-04T17:00:00.000Z'
      status:
        type: string
        enum: ['pending', 'in_progress', 'completed']
        example: 'pending'
      isActive:
        type: boolean
        example: true
  Conversation:
    type: object
    properties:
      creatorId:
        type: string
        example: 'user id'
      name:
        type: string
      participants:
        type: array
        items:
          $ref: '#/definitions/Member'
      isActive:
        type: boolean
        example: true
      messages:
        type: array
        items:
          $ref: '#/definitions/Message'
  Message:
    type: object
    properties:
      sender:
        type: string
        example: 'sender id'
      text:
        type: string
      pinned:
        type: boolean
        example: false
      reactions:
        type: array
        items:
          $ref: '#/definitions/Reaction'
      isActive:
        type: boolean
        example: true
      messageAt:
        type: string
        format: date-time
        example: '2024-03-04T08:00:00.000Z'
  Reaction:
    type: object
    properties:
      reacter:
        type: string
        example: 'user id'
      emotion:
        type: string
        enum: ['like', 'love', 'sad', 'angry', 'happy']
        example: 'like'
  Plan:
    type: object
    properties:
      title:
        type: string
        example: 'Đi ăn sáng'
      cost:
        type: number
        example: 10000
      startAt:
        type: string
        format: date-time
        example: '2024-03-04T08:00:00.000Z'
      endAt:
        type: string
        format: date-time
        example: '2024-03-04T17:00:00.000Z'
      address:
        type: string
        example: 'Tòa VCN'
      location:
        type: object
        $ref: '#/definitions/Location'
  Location:
    type: object
    properties:
      lat:
        type: number
        example: 21.006
      lng:
        type: number
        example: 105.846
  Resource:
    type: object
    properties:
      resource:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
  User:
    type: object
    properties:
      socketId:
        type: string
        example: '123abc'
      name:
        type: string
        example: 'John Doe'
      avatar:
        type: string
        example: 'https://example.com/avatar.jpg'
      password:
        type: string
        example: 'P@ssw0rd'
      email:
        type: string
        example: 'john@example.com'
      address:
        type: string
        example: '123 Main St, City'
      phoneNumber:
        type: string
        example: '1234567890'
      providerAccountId:
        type: string
        example: 'google:1234567890'
      provider:
        type: string
        enum: ['credentials', 'google', 'facebook']
        example: 'google'
      authType:
        type: string
        enum: ['credentials', 'oauth']
        example: 'oauth'
      isActive:
        type: boolean
        example: true
  Error:
    type: object
    properties:
      message:
        type: string
